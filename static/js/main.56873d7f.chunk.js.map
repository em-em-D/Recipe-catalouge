{"version":3,"sources":["components/list.js","components/listloading.js","allCategories.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Card","styled","div","Imagebox","Picture","img","Content","List","props","recipes","console","log","length","map","recipe","src","strMealThumb","className","Body","Fonts","p","WithListLoading","Component","isLoading","categories","Swiper","use","Navigation","Pagination","Container","H2","h2","App","ListLoading","withListLoading","useState","loading","appState","setAppState","categoriesResult","useEffect","category","fetch","then","res","json","push","meals","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8uCASA,IAAMA,EAAOC,IAAOC,IAAV,KAqBJC,EAAWF,IAAOC,IAAV,KASRE,EAAUH,IAAOI,IAAV,KAKPC,EAAUL,IAAOC,IAAV,KAuCEK,EA7BF,SAACC,GAAW,IAEfC,EAAYD,EAAZC,QAER,OADAC,QAAQC,IAAI,KAAKF,GACZA,GAA8B,IAAnBA,EAAQG,OAGrB,mCACEH,EAAQI,KAAI,SAACC,GACZ,OAEI,eAACd,EAAD,WACM,cAACG,EAAD,UACM,cAACC,EAAD,CACIW,IAAKD,EAAOE,iBAGpB,cAACV,EAAD,CAASW,UAAU,UAAnB,4IAb2B,oD,ucCvD/C,IAAMC,EAAOjB,IAAOC,IAAV,KAYJiB,EAAQlB,IAAOmB,EAAV,KAmBIC,MAZf,SAAyBC,GACvB,OAAO,YAAuD,IAAxBC,EAAuB,EAAvBA,UAAcf,EAAS,6BAC3D,OAAKe,EAEH,cAACL,EAAD,UACI,cAACC,EAAD,8DAHiB,cAACG,EAAD,eAAed,MCRzBgB,EAhBE,CACf,OACA,UACA,UACA,OACA,gBACA,QACA,OACA,UACA,OACA,UACA,QACA,aACA,YACA,Q,mnBCJJC,IAAOC,IAAI,CAACC,IAAYC,MAExB,IAAMV,EAAOjB,IAAOC,IAAV,KAYJ2B,EAAY5B,IAAOC,IAAV,KAST4B,EAAK7B,IAAO8B,GAAV,KA2COC,MArCf,WAGE,IAAMC,EAAcC,EAAgB3B,GAHvB,EAImB4B,mBAAS,CACvCC,SAAS,EACT3B,QAAS,KANE,mBAIN4B,EAJM,KAIIC,EAJJ,KAQTC,EAAmB,GAoBvB,OAnBAC,qBAAU,WACNF,EAAY,CAAEF,SAAS,IACzBZ,EAAWX,KAAK,SAAA4B,GACdC,MAAM,wDAAD,OAA0DD,EAA1D,MACFE,MAAM,SAAAC,GACL,OAAOA,EAAIC,UACTF,MAAM,SAAAC,GAIRN,EAAY,CAAEF,SAAS,EAAO3B,QAAS8B,IACvCA,EAAiBO,KAAjB,MAAAP,EAAgB,YAAUK,EAAIG,gBAIjC,CAACT,IAKJ,eAAC,EAAD,WACE,cAACR,EAAD,gCACE,cAACD,EAAD,UACE,cAACI,EAAD,CAAaV,UAAWc,EAASD,QAAS3B,QAAS4B,EAAS5B,gB,QCrEzDuC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aAAc,CACZC,MAAO,GAETC,SAAU,CACRC,UAAW,SAAAC,GAKTA,EAAMH,OAAS,GAEjBI,UAAW,SAAAD,GACTA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAiBzDZ,G,EAjBAM,U,EAAWE,U,EAAWC,kBAiBtBT,EAAf,SCtCea,cAAe,CAC5BC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SAEE,cAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,kB","file":"static/js/main.56873d7f.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport gsap from 'gsap';\r\nimport Parallax from 'parallax-js';\r\nimport Swiper, { Navigation, Pagination } from 'swiper';\r\nimport 'swiper/swiper-bundle.css';\r\n\r\n\r\n\r\nconst Card = styled.div`\r\n max-width: 300px;\r\n position: relative;\r\n margin: 30px 10px;\r\n background: #fff;\r\n padding: 20px 15px;\r\n display: flex;\r\n flex-direction: column;\r\n box-shadow: 0 5px 202px rgba(0,0,0,0.5);\r\n transition: 0.5s ease-in-out;\r\n &:hover .content {\r\n   height: 280px;\r\n   margin-top: -40px !important;\r\n   transition-delay: 0.1s ;\r\n   visibility: visible;\r\n   opacity: 1 !important;\r\n }\r\n `;\r\n\r\n\r\n\r\nconst Imagebox = styled.div`\r\n  position: relative;\r\n  width: 290px;\r\n  height: 260px;\r\n  top: -60px;\r\n  left: 2px;\r\n  z-index: 2;\r\n  box-shadow: 0 5px 20px rgba(0,0,0,0.2);\r\n`\r\nconst Picture = styled.img`\r\n  max-width: 100%;\r\n  border-radius: 4px;\r\n`\r\n\r\nconst Content = styled.div`\r\nposition: relative;\r\nfont-family: 'Pacifico', cursive;\r\nmargin-top: -90px;\r\npadding: 10px 15px;\r\ntext-align: center;\r\nvisibility: hidden;\r\ntransition: 0.3s ease-in-out;\r\n`\r\n// gsap.to(\"li\",{duration: 2.5, autoAlpha:1, repeat: -1, stagger:5})\r\nconst List = (props) => {\r\n\r\n  const { recipes } = props;\r\n  console.log('rs',recipes)\r\n  if (!recipes || recipes.length === 0) return <p>No repcipes, sorry</p>\r\n  return (\r\n    \r\n     <>\r\n      {recipes.map((recipe) => {\r\n        return (\r\n         \r\n            <Card>\r\n                  <Imagebox>\r\n                        <Picture \r\n                            src={recipe.strMealThumb}\r\n                         />\r\n                    </Imagebox>\r\n                    <Content className=\"content\">\r\n                         A recipe is a set of instructions that describes\r\n                         how to prepare or make something,\r\n                         especially a dish of prepared food.\r\n                    </Content>\r\n            </Card>\r\n        \r\n        );\r\n      })}\r\n     </>\r\n  );\r\n};\r\nexport default List;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Body = styled.div`\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow-x: hidden;\r\n    box-sizing: border-box;\r\n    background: #2a2b2a; \r\n   filter: brightness(0.7);\r\n  \r\n`\r\n\r\nconst Fonts = styled.p`\r\nfont-family: 'Pacifico', cursive;\r\nfont-size: 40px;\r\ncolor: white;\r\ntext-align: center;\r\n`\r\n\r\nfunction WithListLoading(Component) {\r\n  return function WihLoadingComponent({ isLoading, ...props }) {\r\n    if (!isLoading) return <Component {...props} />;\r\n    return (\r\n      <Body>\r\n          <Fonts>\r\n              Hold on, fetching data may take some time ...\r\n             </Fonts>\r\n      </Body>         \r\n            );\r\n  };\r\n}\r\nexport default WithListLoading;\r\n","const categories = [\r\n    'Beef',\r\n    'Chicken',\r\n    'Dessert',\r\n    'Lamb',\r\n    'Miscellaneous',\r\n    'Pasta',\r\n    'Pork',\r\n    'Seafood',\r\n    'Side',\r\n    'Starter',\r\n    'Vegan',\r\n    'Vegetarian',\r\n    'Breakfast',\r\n    'Goat',\r\n  ];\r\n  export default categories;","import React, { useEffect, useState, useRef } from 'react';\r\nimport gsap from 'gsap';\r\nimport styled from 'styled-components';\r\nimport List from './components/list';\r\nimport Swiper, { Navigation, Pagination } from 'swiper';\r\nimport 'swiper/swiper-bundle.css';\r\nimport withListLoading from './components/listloading';\r\nimport categories from './allCategories';\r\n\r\n\r\nSwiper.use([Navigation, Pagination]);\r\n\r\nconst Body = styled.div`\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow-x: hidden;\r\n    box-sizing: border-box;\r\n    background: #2a2b2a; \r\n   filter: brightness(0.7)\r\n`\r\n\r\n\r\n const Container = styled.div`\r\nposition: relative;\r\nwidth: 1100px;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nflex-wrap: wrap;\r\npadding: 30px;\r\n`\r\nconst H2 = styled.h2`\r\nfont-family: 'Pacifico', cursive;\r\nfont-size: 50px;\r\ncolor: #ffff;\r\ntext-align: center !important;\r\n`\r\nfunction App() {\r\n\r\n  \r\n  const ListLoading = withListLoading(List);\r\n  const [appState, setAppState] = useState({\r\n    loading: false,\r\n    recipes: [],\r\n  });\r\nconst categoriesResult = [];\r\n  useEffect(() => {\r\n      setAppState({ loading: true });\r\n    categories.map( category => {\r\n      fetch( `https://www.themealdb.com/api/json/v1/1/filter.php?c=${category} ` )\r\n        .then( res => {\r\n          return res.json()\r\n        } ).then( res => {\r\n          // console.log('r', res )\r\n          // console.log('l',categoriesResult.length)\r\n          // console.log('c',categoriesResult)\r\n          setAppState({ loading: false, recipes: categoriesResult });\r\n          categoriesResult.push( ...res.meals );\r\n        } )\r\n    } );\r\n    \r\n    }, [setAppState]);\r\n\r\n    \r\n  \r\n  return (\r\n    <Body>  \r\n      <H2>Available recipes</H2>\r\n        <Container>\r\n          <ListLoading isLoading={appState.loading} recipes={appState.recipes} />\r\n        </Container>\r\n    </Body>\r\n  );\r\n}\r\nexport default App;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './App.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      \r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
